#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <errno.h>
#include <pthread.h>
#include "retardo.h"
#include "sala.h"

#define MAX_HILOS 100

int n_hilos_hombres[MAX_HILOS];
int n_hilos_mujeres[MAX_HILOS];

pthread_mutex_t cerrojo_condiciones = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t condicion_mujer = PTHREAD_COND_INITIALIZER;
pthread_cond_t condicion_hombre = PTHREAD_COND_INITIALIZER;

int num_mujeres = 0;
int num_hombres = 0;


pthread_cond_t condicion_reservar = PTHREAD_COND_INITIALIZER;
pthread_cond_t condicion_liberar = PTHREAD_COND_INITIALIZER;

void* ver_estado(void* arg) {
    while (1) {
        printf("Inicio de la revision \n");
        int capacidad = capacidad_sala();
        for (int i = 1; i < capacidad + 1; i++) {
            printf("Asiento %d %d \n", i, estado_asiento(i));
        }
        printf("Fin de la revision \n");
        sleep(5);
    }
    return NULL;
}


void estado_final_sala(){
    printf("Estado final de la sala\n");
    int capacidad = capacidad_sala();
    for (int i = 1; i < capacidad + 1; i++) {
        printf("Asiento %d %d \n", i, estado_asiento(i));
    }
    printf("Estado final de la sala\n");
}

void* funcion_reto_hombre(void* arg) {
    int index = *(int*)arg;
    pthread_mutex_lock(&cerrojo_condiciones);
    if  (asientos_ocupados() > 10) {
      while (asientos_libres() == 0 || ((num_hombres+1)/asientos_ocupados())*100 >60){
          pthread_cond_wait(&condicion_hombre, &cerrojo_condiciones);
      }
    }
    int sitio = reserva_asiento(n_hilos_hombres[index]);
    num_hombres++;
    pthread_mutex_unlock(&cerrojo_condiciones);
    pausa_aleatoria(3);
    while (asientos_ocupados() == 0){
        pthread_cond_wait(&condicion_liberar, &cerrojo_condiciones);
    }
    sleep(20);
    pthread_mutex_lock(&cerrojo_condiciones);
    libera_asiento(sitio);
    pausa_aleatoria(3);
    pthread_mutex_unlock(&cerrojo_condiciones);
    pthread_cond_broadcast(&condicion_reservar);
    pthread_cond_broadcast(&condicion_liberar);
    pthread_cond_broadcast(&condicion_hombre);
    return NULL;
}


void* funcion_reto_mujer(void* arg) {
    int index = *(int*)arg;
    pthread_mutex_lock(&cerrojo_condiciones);
    if  (asientos_ocupados() > 10) {
      while (asientos_libres() == 0 || ((num_mujeres+1)/asientos_ocupados())*100 > 60){
          pthread_cond_wait(&condicion_mujer, &cerrojo_condiciones);
      }
    }
    int sitio = reserva_asiento(n_hilos_mujeres[index]);
    num_mujeres++;
    pausa_aleatoria(3);
    pthread_mutex_unlock(&cerrojo_condiciones);
    while (asientos_ocupados() == 0){
        pthread_cond_wait(&condicion_liberar, &cerrojo_condiciones);
    }
    sleep(20);
    pthread_mutex_lock(&cerrojo_condiciones);
    libera_asiento(sitio);
    pausa_aleatoria(3);
    pthread_mutex_unlock(&cerrojo_condiciones);
    pthread_cond_broadcast(&condicion_liberar);
    pthread_cond_broadcast(&condicion_mujer);
    return NULL;
}

int main(int argc, char *argv[]) {
    if (argc != 4) {
        fprintf(stderr, "Uso: %s multihilos <num_hilos> <num_hilos_liberar>\n", argv[0]);
        return 1;
    }

    if (strcmp(argv[1], "multihilos") == 0) {
        crea_sala(50);
        pthread_t hilos_hombres[MAX_HILOS];
        pthread_t hilos_mujeres[MAX_HILOS];
        pthread_t hilo_estado;
        int num_hilos_hombres = atoi(argv[2]);
        int num_hilos_mujeres = atoi(argv[3]);
        int indices_hombres[MAX_HILOS];
        int indices_mujeres[MAX_HILOS];

        pthread_create(&hilo_estado, NULL, ver_estado, NULL);
        
        for (int i = 0; i < num_hilos_hombres; i++) {
            n_hilos_hombres[i] = i +100; 
            indices_hombres[i] = i;
            pthread_create(&hilos_hombres[i], NULL, funcion_reto_hombre, (void*)&indices_hombres[i]);
        }
        
        for (int i = 0; i < num_hilos_mujeres; i++) {
            n_hilos_mujeres[i] = i + 1;
            indices_mujeres[i] = i;
            pthread_create(&hilos_mujeres[i], NULL, funcion_reto_mujer, (void*)&indices_mujeres[i]);
        }

        for (int i = 0; i < num_hilos_hombres; i++) {
            pthread_join(hilos_hombres[i], NULL);
        }

        for (int i = 0; i < num_hilos_mujeres; i++) {
            pthread_join(hilos_mujeres[i], NULL);
        }
        
        pthread_mutex_destroy(&cerrojo_condiciones);

        pthread_cancel(hilo_estado);
    
        estado_final_sala();
        elimina_sala();
    
    
    } else {
        fprintf(stderr, "Orden no vÃ¡lida\n");
    }

    return 0;
}
