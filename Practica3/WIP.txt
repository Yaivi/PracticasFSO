----------------CORREGIR----------------
- Las nuevas funciones incorporadas a la API funcionan de acuerdo con las especificaciones -> 
    *Se ha decidido guardar como parte del estado de la sala, además de la capacidad, el número de asientos libres y ocupados. 
    *Sin embargo, esta decisión no se ve reflejada en la posible actualización de estos datos a la hora de guardar o recuperar un estado parcial.


- int guarda_estado_sala (const char* ruta_fichero): Guarda el estado actual de la sala en el fichero que se pasa como argumento, sobreescribiendo toda la información contenida en el fichero. Devuelve 0 si todo ha ido bien o -1 en caso de error. -> 
    (HECHO) *No se entiende el bucle donde se escribe el vector. Si se trabaja con escrituras en tamaños del bloque, ¿Qué sentido tiene que esto se haga en un bucle donde se itera para cada elemento del vector?


- int recupera_estado_sala (const char* ruta_fichero): Recupera el estado de la sala a partir de la información guardada en el fichero que se pasa como argumento, sobreescribiendo toda ... -> 
    (HECHO) *No se entiende el bucle donde se escribe el vector. Si se trabaja con escrituras en tamaños del bloque, ¿Qué sentido tiene que esto se haga en un bucle donde se itera para cada elemento del vector?


- int guarda_estadoparcial_sala (const char* ruta_fichero, size_t num_asientos, int* id_asientos): Guarda el estado de un conjunto de asientos de la sala en un fichero preexistente que se pasa como argumento, sobreescribiendo la información contenida en el fichero. Devuelve 0 si todo ha ido bien o -1 en caso de error. -> 
    (HECHO)  *¿Cuál es la razón por la que se reescribe la capacidad de la sala y qué pasa con los valores de estado que representan los libres y ocupados?
    (HECHO) *Si existen id no válidos, el funcionamiento es extraño pues actualizaría parcialmente los asientos hasta el id no válido encontrado. 
    (HECHO) *Se están guardando los asientos libres.

- int recupera_estadoparcial_sala (const char* ruta_fichero, size_t num_asientos, int* id_asientos): Recupera el estado de un conjunto de asientos de la sala a partir de la información guardada en un fichero preexistente que se pasa como argumento, sobreescribiendo la información del estado actual del conjunto de asientos que se pasa por parámetro, cuyo estado actual pasará a coincidir con el contenido en el fichero. Devuelve 0 si todo ha ido bien o -1 en caso de error. -> 
    (HECHO) *Si existen id no válidos, el funcionamiento es extraño pues recuperaría parcialmente los asientos hasta el id no válido encontrado

- misala reserva -f ruta id_persona1 id_persona2... -> 
    (HECHO) *No es necesario guardar el estado completo de la sala.
    *Refactorizar el código.

- misala anula -f ruta -asientos id_asiento1 id_asiento2... -> 
    (HECHO) *No es necesario guardar el estado completo de la sala.
    *Refactorizar el código.
